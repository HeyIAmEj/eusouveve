import {
  createMutex
} from "./chunk-RJOEY2ZF.js";
import {
  Observable,
  add,
  compareRelativePositions,
  createAbsolutePositionFromRelativePosition,
  createDebouncer,
  createRelativePositionFromJSON,
  createRelativePositionFromTypeIndex,
  equalityFlat,
  max
} from "./chunk-XI333BDY.js";
import {
  require_codemirror
} from "./chunk-ZCOSF3A2.js";
import {
  __toESM
} from "./chunk-BQWMX7FD.js";

// node_modules/lib0/diff.js
var highSurrogateRegex = /[\uD800-\uDBFF]/;
var lowSurrogateRegex = /[\uDC00-\uDFFF]/;
var simpleDiffString = (a, b) => {
  let left = 0;
  let right = 0;
  while (left < a.length && left < b.length && a[left] === b[left]) {
    left++;
  }
  if (left > 0 && highSurrogateRegex.test(a[left - 1]))
    left--;
  while (right + left < a.length && right + left < b.length && a[a.length - right - 1] === b[b.length - right - 1]) {
    right++;
  }
  if (right > 0 && lowSurrogateRegex.test(a[a.length - right]))
    right--;
  return {
    index: left,
    remove: a.length - left - right,
    insert: b.slice(left, b.length - right)
  };
};

// node_modules/y-codemirror/src/y-codemirror.js
var import_codemirror = __toESM(require_codemirror());
var cmOrigin = "y-codemirror";
var typeObserver = (binding, event) => {
  binding._mux(() => {
    const cmDoc = binding.cmDoc;
    const cm = cmDoc.getEditor();
    let anchor = cm.indexFromPos(cm.getCursor("anchor"));
    let head = cm.indexFromPos(cm.getCursor("head"));
    const switchSel = head < anchor;
    if (switchSel) {
      const tmp = head;
      head = anchor;
      anchor = tmp;
    }
    const performChange = () => {
      const delta = event.delta;
      let index = 0;
      for (let i = 0; i < event.delta.length; i++) {
        const d = delta[i];
        if (d.retain) {
          index += d.retain;
        } else if (d.insert) {
          if (index < anchor || anchor < head && index === anchor) {
            anchor += d.insert.length;
          }
          if (index < head) {
            head += d.insert.length;
          }
          const pos = cmDoc.posFromIndex(index);
          cmDoc.replaceRange(d.insert, pos, pos, cmOrigin);
          index += d.insert.length;
        } else if (d.delete) {
          if (index < anchor) {
            anchor = max(anchor - d.delete, index);
          }
          if (index < head) {
            head = max(head - d.delete, index);
          }
          const start = cmDoc.posFromIndex(index);
          const end = cmDoc.posFromIndex(index + d.delete);
          cmDoc.replaceRange("", start, end, cmOrigin);
        }
      }
    };
    if (cm) {
      cm.operation(performChange);
    } else {
      performChange();
    }
    if (switchSel) {
      const tmp = head;
      head = anchor;
      anchor = tmp;
    }
    cm.setSelection(cm.posFromIndex(anchor), cm.posFromIndex(head), { scroll: false });
  });
};
var targetObserver = (binding, changes) => {
  binding._mux(() => {
    binding.doc.transact(() => {
      const hasPaste = binding.yUndoManager && changes.some((change) => change.origin === "paste");
      if (hasPaste) {
        binding.yUndoManager.stopCapturing();
      }
      if (changes.length > 1) {
        const d = simpleDiffString(binding.type.toString(), binding.cmDoc.getValue());
        binding.type.delete(d.index, d.remove);
        binding.type.insert(d.index, d.insert);
      } else {
        const change = changes[0];
        const start = binding.cmDoc.indexFromPos(change.from);
        const delLen = change.removed.map((s) => s.length).reduce(add) + change.removed.length - 1;
        if (delLen > 0) {
          binding.type.delete(start, delLen);
        }
        if (change.text.length > 0) {
          binding.type.insert(start, change.text.join("\n"));
        }
      }
      if (hasPaste) {
        binding.yUndoManager.stopCapturing();
      }
    }, binding);
  });
  if (binding._pendingCursorEvent) {
    binding._pendingCursorEvent = false;
    binding.emit("cursorActivity", [binding]);
  }
};
var createRemoteCaret = (username, color) => {
  const caret = document.createElement("span");
  caret.classList.add("remote-caret");
  caret.setAttribute("style", `border-color: ${color}`);
  const userDiv = document.createElement("div");
  userDiv.setAttribute("style", `background-color: ${color}`);
  userDiv.insertBefore(document.createTextNode(username), null);
  caret.insertBefore(userDiv, null);
  setTimeout(() => {
    caret.classList.add("hide-name");
  }, 2e3);
  return caret;
};
var createEmptyLinePlaceholder = (color) => {
  const placeholder = document.createElement("span");
  placeholder.setAttribute("style", "user-select: none;");
  const emptyTxt = document.createElement("span");
  emptyTxt.insertBefore(document.createTextNode(""), null);
  const sel = document.createElement("span");
  sel.setAttribute("class", "y-line-selection");
  sel.setAttribute("style", `display: inline-block; position: absolute; left: 4px; right: 4px; top: 0; bottom: 0; background-color: ${color}70`);
  placeholder.insertBefore(sel, null);
  placeholder.insertBefore(emptyTxt, null);
  return placeholder;
};
var updateRemoteSelection = (y, cm, type, cursors, clientId, awareness) => {
  const aw = awareness.getStates().get(clientId);
  const m = cursors.get(clientId);
  if (m !== void 0) {
    if (m.caret) {
      m.caret.clear();
    }
    m.sel.forEach((sel) => sel.clear());
    cursors.delete(clientId);
  }
  if (aw === void 0) {
    return;
  }
  const user = aw.user || {};
  if (user.color == null) {
    user.color = "#ffa500";
  }
  if (user.name == null) {
    user.name = `User: ${clientId}`;
  }
  const cursor = aw.cursor;
  if (cursor == null || cursor.anchor == null || cursor.head == null) {
    return;
  }
  const anchor = createAbsolutePositionFromRelativePosition(JSON.parse(cursor.anchor), y);
  const head = createAbsolutePositionFromRelativePosition(JSON.parse(cursor.head), y);
  if (anchor !== null && head !== null && anchor.type === type && head.type === type) {
    const headpos = cm.posFromIndex(head.index);
    const anchorpos = cm.posFromIndex(anchor.index);
    let from, to;
    if (head.index < anchor.index) {
      from = headpos;
      to = anchorpos;
    } else {
      from = anchorpos;
      to = headpos;
    }
    const caretEl = createRemoteCaret(user.name, user.color);
    if (m && equalityFlat(aw.cursor.anchor, m.awCursor.anchor) && equalityFlat(aw.cursor.head, m.awCursor.head)) {
      caretEl.classList.add("hide-name");
    }
    const sel = [];
    if (head.index !== anchor.index) {
      if (from.line !== to.line && from.ch !== 0) {
        sel.push(cm.markText(from, new import_codemirror.default.Pos(from.line + 1, 0), { css: `background-color: ${user.color}70;`, inclusiveRight: false, inclusiveLeft: false }));
        from = new import_codemirror.default.Pos(from.line + 1, 0);
      }
      while (from.line !== to.line) {
        sel.push(cm.setBookmark(new import_codemirror.default.Pos(from.line, 0), { widget: createEmptyLinePlaceholder(user.color) }));
        from = new import_codemirror.default.Pos(from.line + 1, 0);
      }
      sel.push(cm.markText(from, to, { css: `background-color: ${user.color}70;`, inclusiveRight: false, inclusiveLeft: false }));
    }
    const caret = sel.length > 0 && to === headpos && headpos.ch === 0 ? null : cm.setBookmark(headpos, { widget: caretEl, insertLeft: true });
    cursors.set(clientId, { caret, sel, awCursor: cursor });
  }
};
var codemirrorCursorActivity = (y, cm, type, awareness) => {
  const aw = awareness.getLocalState();
  if (!cm.hasFocus() || aw == null || !cm.display.wrapper.ownerDocument.hasFocus()) {
    return;
  }
  const newAnchor = createRelativePositionFromTypeIndex(type, cm.indexFromPos(cm.getCursor("anchor")));
  const newHead = createRelativePositionFromTypeIndex(type, cm.indexFromPos(cm.getCursor("head")));
  let currentAnchor = null;
  let currentHead = null;
  if (aw.cursor != null) {
    currentAnchor = createRelativePositionFromJSON(JSON.parse(aw.cursor.anchor));
    currentHead = createRelativePositionFromJSON(JSON.parse(aw.cursor.head));
  }
  if (aw.cursor == null || !compareRelativePositions(currentAnchor, newAnchor) || !compareRelativePositions(currentHead, newHead)) {
    awareness.setLocalStateField("cursor", {
      anchor: JSON.stringify(newAnchor),
      head: JSON.stringify(newHead)
    });
  }
};
var CodemirrorBinding = class extends Observable {
  /**
   * @param {Y.Text} textType
   * @param {import('codemirror').Editor} codeMirror
   * @param {any | null} [awareness]
   * @param {{ yUndoManager?: Y.UndoManager }} [options]
   */
  constructor(textType, codeMirror, awareness = null, { yUndoManager = null } = {}) {
    super();
    const doc = textType.doc;
    const cmDoc = codeMirror.getDoc();
    this.doc = doc;
    this.type = textType;
    this.cm = codeMirror;
    this.cmDoc = cmDoc;
    this.awareness = awareness || null;
    this.yUndoManager = yUndoManager;
    this._onStackItemAdded = ({ stackItem, changedParentTypes }) => {
      if (changedParentTypes.has(textType) && this._beforeChangeSelection) {
        stackItem.meta.set(this, this._beforeChangeSelection);
      }
    };
    this._onStackItemPopped = ({ stackItem }) => {
      const sel = stackItem.meta.get(this);
      if (sel) {
        const anchor = createAbsolutePositionFromRelativePosition(sel.anchor, doc).index;
        const head = createAbsolutePositionFromRelativePosition(sel.head, doc).index;
        codeMirror.setSelection(codeMirror.posFromIndex(anchor), codeMirror.posFromIndex(head));
        this._beforeChange();
      }
    };
    if (yUndoManager) {
      yUndoManager.trackedOrigins.add(this);
      const editorUndo = (cm) => {
        cm.endOperation();
        yUndoManager.undo();
        cm.startOperation();
      };
      const editorRedo = (cm) => {
        cm.endOperation();
        yUndoManager.redo();
        cm.startOperation();
      };
      codeMirror.addKeyMap({
        // pc
        "Ctrl-Z": editorUndo,
        "Shift-Ctrl-Z": editorRedo,
        "Ctrl-Y": editorRedo,
        // mac
        "Cmd-Z": editorUndo,
        "Shift-Cmd-Z": editorRedo,
        "Cmd-Y": editorRedo
      });
      yUndoManager.on("stack-item-added", this._onStackItemAdded);
      yUndoManager.on("stack-item-popped", this._onStackItemPopped);
    }
    this._mux = createMutex();
    cmDoc.setValue(textType.toString());
    this._typeObserver = (event) => typeObserver(this, event);
    this._targetObserver = (instance, changes) => {
      if (instance.getDoc() === cmDoc) {
        targetObserver(this, changes);
      }
    };
    this._cursors = /* @__PURE__ */ new Map();
    this._changedCursors = /* @__PURE__ */ new Set();
    this._debounceCursorEvent = createDebouncer(10);
    this._awarenessListener = (event) => {
      if (codeMirror.getDoc() !== cmDoc) {
        return;
      }
      const f = (clientId) => {
        if (clientId !== doc.clientID) {
          this._changedCursors.add(clientId);
        }
      };
      event.added.forEach(f);
      event.removed.forEach(f);
      event.updated.forEach(f);
      if (this._changedCursors.size > 0) {
        this._debounceCursorEvent(() => {
          this._changedCursors.forEach((clientId) => {
            updateRemoteSelection(doc, codeMirror, textType, this._cursors, clientId, awareness);
          });
          this._changedCursors.clear();
        });
      }
    };
    this._pendingCursorEvent = false;
    this._cursorListener = () => {
      if (codeMirror.getDoc() === cmDoc) {
        this._pendingCursorEvent = true;
        setTimeout(() => {
          if (this._pendingCursorEvent) {
            this._pendingCursorEvent = false;
            this.emit("cursorActivity", [codeMirror]);
          }
        }, 0);
      }
    };
    this.on("cursorActivity", () => {
      codemirrorCursorActivity(doc, codeMirror, textType, awareness);
    });
    this._blurListeer = () => awareness.setLocalStateField("cursor", null);
    textType.observe(this._typeObserver);
    codeMirror.on("changes", this._targetObserver);
    this._beforeChangeSelection = null;
    this._beforeChange = () => {
      this._mux(() => {
        const anchor = createRelativePositionFromTypeIndex(textType, codeMirror.indexFromPos(codeMirror.getCursor("anchor")));
        const head = createRelativePositionFromTypeIndex(textType, codeMirror.indexFromPos(codeMirror.getCursor("head")));
        this._beforeChangeSelection = { anchor, head };
      });
    };
    codeMirror.on("beforeChange", this._beforeChange);
    if (awareness) {
      codeMirror.on("swapDoc", this._blurListeer);
      awareness.on("change", this._awarenessListener);
      codeMirror.on("cursorActivity", this._cursorListener);
      codeMirror.on("blur", this._blurListeer);
      codeMirror.on("focus", this._cursorListener);
    }
  }
  destroy() {
    this.type.unobserve(this._typeObserver);
    this.cm.off("swapDoc", this._blurListeer);
    this.cm.off("changes", this._targetObserver);
    this.cm.off("beforeChange", this._beforeChange);
    this.cm.off("cursorActivity", this._cursorListener);
    this.cm.off("focus", this._cursorListener);
    this.cm.off("blur", this._blurListeer);
    if (this.awareness) {
      this.awareness.off("change", this._awarenessListener);
    }
    if (this.yUndoManager) {
      this.yUndoManager.off("stack-item-added", this._onStackItemAdded);
      this.yUndoManager.off("stack-item-popped", this._onStackItemPopped);
      this.yUndoManager.trackedOrigins.delete(this);
    }
    this.type = null;
    this.cm = null;
    this.cmDoc = null;
    super.destroy();
  }
};
var CodeMirrorBinding = CodemirrorBinding;
export {
  CodeMirrorBinding,
  CodemirrorBinding,
  cmOrigin
};
//# sourceMappingURL=y-codemirror.js.map
